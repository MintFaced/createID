<!--
  6529IDPlease – MIT Licensed
  Generates a 6529‑style passport/ID graphic and downloads it **as a JPEG**.
  Place **ID Please background.png** in the same directory (or adjust BG_SRC).
-->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>ID Please</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet" />
  <style>
    :root { --canvas-w: 1095px; --canvas-h: 768px; }
    * { box-sizing: border-box; }
    body {font-family:"Share Tech Mono","Courier New",monospace;background:#111;color:#eee;margin:0;display:flex;flex-direction:column;align-items:center;gap:1.6rem;padding:1.6rem 0;}
    h1{margin:0;font-size:1.8rem}
    form{background:#1b1b1b;padding:1rem 2rem 2rem;border-radius:.75rem;display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:1rem 2rem;width:min(100%,1024px)}
    label{display:flex;flex-direction:column;font-size:.9rem;gap:.25rem}
    input[type=text],input[type=date]{font-family:inherit;font-size:.9rem;padding:.4rem .5rem;border-radius:.35rem;border:1px solid #444;background:#000;color:#eee}
    input[type=file]{color:#bbb;font-size:.85rem}
    button{grid-column:1/-1;padding:.7rem 1rem;font-size:1rem;font-family:inherit;border:none;border-radius:.5rem;background:#4caf50;cursor:pointer;color:#fff}
    button:disabled{background:#333;cursor:not-allowed}
    canvas{outline:2px solid #555;width:var(--canvas-w);height:var(--canvas-h);max-width:100%;height:auto}
  </style>
</head>
<body>
  <h1>6529 ID Please Generator</h1>
  <form id="passport-form">
    <label>Ser‑name<input name="surname" required placeholder="DEGEN" /></label>
    <label>First Name<input name="firstname" required placeholder="KEVIN" /></label>
    <label>Nationality<input name="nationality" required placeholder="COUNTRY" /></label>
    <label>Token Identification<input name="tokenid" required placeholder="NUMBER" /></label>
    <label>Reputation<input name="reputation" required placeholder="FLEX" /></label>
    <label>Authority<input name="authority" required placeholder=".ETH ADDRESS" /></label>
    <label>Mint Date<input name="mintdate" type="date" /></label>
    <label>ENS Expiry Date<input name="expirydate" type="date" /></label>
    <label>Passport Number (hex, 7‑char)<input name="passnum" pattern="[0-9A-Fa-f]{7}" title="7 hexadecimal characters" placeholder="7F3A180" /></label>
    <label>Wallet / ENS (for MRZ)<input name="wallet" placeholder="0xABC... or name.eth" /></label>
    <label>PFP (square image)<input name="avatar" type="file" accept="image/*" /></label>
    <button type="submit">Generate & Download JPEG</button>
  </form>

  <canvas id="passport-canvas" width="1095" height="768" hidden></canvas>

<script>
(() => {
  'use strict';
  const form   = document.getElementById('passport-form');
  const canvas = document.getElementById('passport-canvas');
  const ctx    = canvas.getContext('2d');

  // Background image
  const BG_SRC = 'ID Please background.png';
  const bgImg  = new Image(); bgImg.src = BG_SRC;

  // Default dates
  const pad = n=>n.toString().padStart(2,'0');
  const today=new Date();
  const iso=d=>`${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
  form.mintdate.value=iso(today);
  const plus2=new Date(today); plus2.setFullYear(today.getFullYear()+2);
  form.expirydate.value=iso(plus2);

  // Submit
  form.addEventListener('submit', async e=>{
    e.preventDefault();
    const data=Object.fromEntries(new FormData(form).entries());
    if(!data.passnum){
      data.passnum=crypto.getRandomValues(new Uint32Array(1))[0].toString(16).toUpperCase().slice(0,7).padStart(7,'0');
    }
    await renderPassport(data);
    downloadJPEG();
  });

  // Download helper – now JPEG
  function downloadJPEG(){
    const url = canvas.toDataURL('image/jpeg',0.92); // 92% quality
    const a=document.createElement('a');
    a.href=url; a.download=`passport_${Date.now()}.jpg`; a.click();
  }

  // Render
  async function renderPassport(d){
    canvas.hidden=false; ctx.save(); ctx.clearRect(0,0,canvas.width,canvas.height);
    await drawBackground(); drawHeader();
    const AVATAR=260;
    if(d.avatar&&d.avatar.size){await drawUserImg(d.avatar,50,110,AVATAR,AVATAR);} else {ctx.fillStyle='#fff';ctx.fillRect(50,110,AVATAR,AVATAR);ctx.lineWidth=8;ctx.strokeStyle='#000';ctx.strokeRect(50,110,AVATAR,AVATAR);} 
    drawTextBlock(d); drawMRZ(d); ctx.restore();
  }

  // Helpers
  async function drawBackground(){ if(!bgImg.complete) await bgImg.decode(); ctx.drawImage(bgImg,0,0,canvas.width,canvas.height);} 
  function drawHeader(){ctx.fillStyle='#000';ctx.font='bold 56px "Share Tech Mono", "Courier New", monospace';ctx.textBaseline='top';ctx.fillText('6529 NATION',310,20);} 
  function drawTextBlock(d){const x=370,lineH=54;let y=110;ctx.fillStyle='#000';const rows=[['Type','IDENTIITY'],['Country','6529'],['Passport Numba',d.passnum],['Ser‑name',d.surname.toUpperCase()],['First Name',d.firstname.toUpperCase()],['Nationality',d.nationality.toUpperCase()],['Token Identification',d.tokenid.toUpperCase()],['Reputation',d.reputation.toUpperCase()],['Mint Date',fmt(d.mintdate)],['Authority',d.authority.toUpperCase()],['ENS Expiry Date',fmt(d.expirydate)]];rows.forEach(([l,v])=>{ctx.font='24px "Share Tech Mono"';ctx.fillText(l,x,y);ctx.font='bold 42px "Share Tech Mono"';ctx.fillText(v,x,y+24);y+=lineH;}); drawSymbol(x+620,92);} 
  function drawMRZ(d){const baseY=canvas.height-110;ctx.fillStyle='#000';ctx.font='bold 38px "Share Tech Mono"';const ln1=`<${d.surname.toUpperCase()}<<${d.firstname.toUpperCase()}<<${d.reputation.toUpperCase()}<<<<<<<<<<<<<<<<<<`.slice(0,44);const wallet=(d.wallet||( '0x'+crypto.getRandomValues(new Uint32Array(2))[0].toString(16))).toUpperCase();const ln2=`<${wallet}`.padEnd(44,'<');ctx.fillText(ln1,30,baseY);ctx.fillText(ln2,30,baseY+50);} 
  const months=['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'];
  const fmt=s=>{if(!s)return'';const[a,b,c]=s.split('-');return`${parseInt(c)} ${months[parseInt(b)-1]} ${a}`};
  function drawSymbol(x,y){ctx.save();ctx.strokeStyle='#000';ctx.lineWidth=6;ctx.beginPath();ctx.arc(x,y,24,0,Math.PI*2);ctx.stroke();ctx.beginPath();ctx.moveTo(x-42,y);ctx.lineTo(x+42,y);ctx.stroke();ctx.restore();}
  async function drawUserImg(f,x,y,w,h){const url=URL.createObjectURL(f);const img=new Image();img.src=url;try{await img.decode();}catch(e){console.error('avatar decode',e);}const s=Math.min(img.width,img.height);ctx.drawImage(img,(img.width-s)/2,(img.height-s)/2,s,s,x,y,w,h);URL.revokeObjectURL(url);} 
})();
</script>
</body>
</html>
