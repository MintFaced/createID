<!--
6529IDPlease – MIT Licensed
Single‑file web app that lets a user enter data and instantly generate a 6529‑style passport image, ready to download, now using a fixed glitch background.
Place the PNG file **ID Please background.png** in the same folder as this file (or adjust BG_SRC below).
Drop this file into a browser – no build step required.
-->
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>ID Please</title>
<meta name="viewport" content="width=device-width,initial-scale=1">

<!-- Load OCR‑A alternative via Google Fonts; will fall back to Courier New. -->
<link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet">

<style>
:root {
--canvas-w: 1095px;
--canvas-h: 768px;
}

body {
font-family: "Share Tech Mono", "Courier New", monospace;
background: #111;
color: #eee;
margin: 0;
display: flex;
flex-direction: column;
align-items: center;
gap: 1.5rem;
padding: 1.5rem 0;
}

h1 { font-size: 1.8rem; margin: 0; }

form {
background: #1b1b1b;
padding: 1rem 2rem 2rem;
border-radius: 0.75rem;
display: grid;
grid-template-columns: repeat(auto-fit,minmax(220px,1fr));
gap: 1rem 2rem;
width: min(100%, 1024px);
}

label {
display: flex;
flex-direction: column;
font-size: 0.9rem;
gap: 0.25rem;
}

input[type="text"], input[type="date"] {
font-family: inherit;
font-size: 0.9rem;
padding: 0.4rem 0.5rem;
border-radius: 0.35rem;
border: 1px solid #444;
background: #000;
color: #eee;
}

input[type="file"] { color: #bbb; font-size: 0.85rem; }

button {
grid-column: 1 / -1;
padding: 0.7rem 1rem;
font-size: 1rem;
font-family: inherit;
border: none;
border-radius: 0.5rem;
background: #4caf50;
cursor: pointer;
color: #fff;
}

button:disabled { background: #333; cursor: not-allowed; }

canvas {
outline: 2px solid #555;
width: var(--canvas-w);
height: var(--canvas-h);
max-width: 100%;
height: auto;
}
</style>
</head>
<body>
<h1>6529 ID Please Generator</h1>

<form id="passport-form">
<label>Ser‑name<input required name="surname" type="text" placeholder="DEGEN"></label>
<label>First Name<input required name="firstname" type="text" placeholder="KEVIN"></label>
<label>Nationality<input required name="nationality" type="text" placeholder="COUNTRY"></label>
<label>Token Identification<input required name="tokenid" type="text" placeholder="NUMBER"></label>
<label>Reputation<input required name="reputation" type="text" placeholder="FLEX"></label>
<label>Authority<input required name="authority" type="text" placeholder=".ETH ADDRESS"></label>
<label>Mint Date<input name="mintdate" type="date"></label>
<label>ENS Expiry Date<input name="expirydate" type="date"></label>
<label>Passport Number (0x last 7 digits)<input name="passnum" type="text" placeholder="7F3A180" pattern="[0-9A-Fa-f]{7}" title="7 hexadecimal characters"></label>
<label>Wallet / ENS (for MRZ line)<input name="wallet" type="text" placeholder="0xABC... or name.eth"></label>
<label>PFP (square image)<input name="avatar" type="file" accept="image/*"></label>
<button type="submit">Generate & Download 6529 Identity</button>
</form>

<canvas id="passport-canvas" width="1095" height="768" hidden></canvas>

<script>
(() => {
'use strict';
const form = document.getElementById('passport-form');
const canvas = document.getElementById('passport-canvas');
const ctx = canvas.getContext('2d');

// ——— Background image setup ———
const BG_SRC = 'ID Please background.png'; // adjust if you rename the file
const bgImg = new Image();
bgImg.src = BG_SRC;

// Helper functions for dates
const pad = n => n.toString().padStart(2,'0');
const today = new Date();
const iso = d => `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;

// Initialise default dates
form.mintdate.value = iso(today);
const plus2 = new Date(today); plus2.setFullYear(today.getFullYear()+2);
form.expirydate.value = iso(plus2);

form.addEventListener('submit', async (e) => {
e.preventDefault();
const data = Object.fromEntries(new FormData(form).entries());

// Auto‑generate passport number if blank
if(!data.passnum)
data.passnum = crypto.getRandomValues(new Uint32Array(1))[0]
.toString(16).toUpperCase().slice(0,6).padStart(6,'0');

await renderPassport(data);
downloadPNG(canvas.toDataURL('image/png'));
});

function downloadPNG(dataURL){
const link = document.createElement('a');
link.href = dataURL;
link.download = `passport_${Date.now()}.png`;
link.click();
}

async function renderPassport(d){
canvas.hidden = false; // Reveal canvas once we draw something
ctx.save();
ctx.clearRect(0,0,canvas.width,canvas.height);

await drawBackground();
drawHeader();

// Draw avatar or placeholder
const avatarSize = 260;
if(d.avatar && d.avatar.size){
await drawUserImage(d.avatar, 50, 110, avatarSize, avatarSize);
} else {
ctx.fillStyle = '#fff';
ctx.fillRect(50,110,avatarSize,avatarSize);
ctx.strokeStyle = '#000';
ctx.lineWidth = 8;
ctx.strokeRect(50,110,avatarSize,avatarSize);
}

drawTextBlock(d);
drawMRZ(d);
ctx.restore();
}

// ————————————————————————————————————————
// Drawing helpers
// ————————————————————————————————————————

function drawHeader(){
ctx.fillStyle = '#000';
ctx.font = 'bold 56px "Share Tech Mono", "Courier New", monospace';
ctx.textBaseline = 'top';
ctx.fillText('6529 NATION', 310, 20);
}

function drawTextBlock(d){
const x = 370, lineH = 54;
let y = 110;
ctx.fillStyle = '#000';
const rows = [
['Type', 'IDENTIITY'],
['Country', '6529'],
['Passport Numba', d.passnum],
['Ser‑name', d.surname.toUpperCase()],
['First Name', d.firstname.toUpperCase()],
['Nationality', d.nationality.toUpperCase()],
['Token Identification', d.tokenid.toUpperCase()],
['Reputation', d.reputation.toUpperCase()],
['Mint Date', formatDate(d.mintdate)],
['Authority', d.authority.toUpperCase()],
['ENS Expiry Date', formatDate(d.expirydate)]
];

rows.forEach(([label,val])=>{
ctx.font = '24px "Share Tech Mono", monospace';
ctx.fillText(label, x, y);
ctx.font = 'bold 42px "Share Tech Mono", monospace';
ctx.fillText(val, x, y+24);
y += lineH;
});

// Passport symbol top‑right of passport number line
drawPassportSymbol(x+620, 92);
}

function drawMRZ(d){
const mrzY = canvas.height - 110;
ctx.fillStyle = '#000';
ctx.font = 'bold 38px "Share Tech Mono", monospace';
const ln1 = (`<${d.surname.toUpperCase()}<<${d.firstname.toUpperCase()}<<${d.reputation.toUpperCase()}<<<<<<<<<<<<<<<<<<`).slice(0,44);
const wallet = (d.wallet || ('0x'+crypto.getRandomValues(new Uint32Array(2))[0].toString(16))).toUpperCase();
const ln2 = (`<${wallet}`).padEnd(44,'<');
ctx.fillText(ln1, 30, mrzY);
ctx.fillText(ln2, 30, mrzY+50);
}

function formatDate(isoStr){
if(!isoStr) return '';
const [y,m,d] = isoStr.split('-');
const monthNames = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'];
return `${parseInt(d)} ${monthNames[parseInt(m)-1]} ${y}`;
}

function drawPassportSymbol(x,y){
ctx.save();
ctx.strokeStyle = '#000';
ctx.lineWidth = 6;
ctx.beginPath();
ctx.arc(x,y,24,0,Math.PI*2);
ctx.stroke();
ctx.beginPath();
ctx.moveTo(x-42,y);
ctx.lineTo(x+42,y);
ctx.stroke();
ctx.restore();
}

async function drawUserImage(file,x,y,w,h){
const imgURL = URL.createObjectURL(file);
const img = new Image();
img.src = imgURL;
try {
await img.decode();
} catch(err){
console.error('Avatar decode failed',err);
}
const s = Math.min(img.width,img